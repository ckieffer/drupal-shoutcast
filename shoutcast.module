<?php

// $Id: shoutcast.module,v 1.10.2.1 2010/08/22 23:04:42 yohnson Exp $

/**
 * Display help and module information
 *
 * @param  string  $path    Path to display help for
 * @param  array   $arg     Holds the current path returned from arg() function
 * @return string  $output  Help text for the path
 */
function shoutcast_help($path, $arg) {
  switch ($path) {
    case 'admin/help#shoutcast':
      $output = '<p>' . t('Displays SHOUTcast server statistics.') . '</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Valid permissions for this module
 *
 * @return array   Valid permissions list for the SHOUTcast stats module
 */
function shoutcast_perm() {
  return array('access shoutcast content', 'access administration pages');
}

/**
 * Generate the SHOUTcast admin settings form
 *
 * @return array   Module admin form
 *
 * @todo Add date format to display with song history in block and page
 */
function shoutcast_admin() {
  $form['shoutcast_ip'] = array(
      '#type' => 'textfield',
      '#title' => t('SHOUTcast Server URL'),
      '#default_value' => variable_get('shoutcast_ip', '127.0.0.1'),
      '#size' => 40,
      '#maxlength' => 255,
      '#description' => t('The URL of the SHOUTcast server, not including http://'),
      '#required' => TRUE,
  );

  $form['shoutcast_port'] = array(
      '#type' => 'textfield',
      '#title' => t('Server Port'),
      '#default_value' => variable_get('shoutcast_port', '8000'),
      '#size' => 4,
      '#maxlength' => 4,
      '#description' => t('SHOUTcast server port, normally 8000'),
      '#required' => TRUE,
  );

  $form['shoutcast_pw'] = array(
      '#type' => 'textfield',
      '#title' => t('Server Password for XML Stats'),
      '#default_value' => variable_get('shoutcast_pw', 'password'),
      '#size' => 20,
      '#maxlength' => 100,
      '#description' => t('Password of SHOUTcast server, normally set in sc_serv.conf'),
      '#required' => TRUE,
  );

  $form['shoutcast_cachetime'] = array(
      '#type' => 'select',
      '#title' => t('Cache Time'),
      '#default_value' => variable_get('shoutcast_cachetime', 1),
      '#options' => array(0, 1, 2, 4, 5, 10, 15, 30, 60),
      '#description' => t('Minutes between XML retrieval.')
  );

  $form['shoutcast_error_handling'] = array(
      '#type' => 'radios',
      '#title' => t('Error Handling'),
      '#default_value' => variable_get('shoutcast_error_handling', 0),
      '#options' => array(t('Do not display table'), t('Display table with error message')),
      '#description' => t('When SHOUTcast XML feed is unavaible or invalid.'),
  );

  $form['shoutcast_page_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Page Display Options'),
      '#default_value' => variable_get('shoutcast_page_fields', array('listener', 'server',
          'stream', 'songhistory', 'listener_detail')),
      '#options' => array(
          'listener' => t('Listener summary'),
          'server' => t('Server summary'),
          'stream' => t('Stream summary'),
          'songhistory' => t('Song history'),
          'listener_detail' => t('Listener detail'),
      )
  );

  $form['shoutcast_block_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Block Title'),
      '#default_value' => variable_get('shoutcast_block_subject', 'Listener Stats'),
      '#size' => 25,
      '#maxlength' => 25,
      '#description' => t('The title displayed for the SHOUTcast stats block.'),
      '#required' => TRUE,
  );

  // add the details_link option
  $form['shoutcast_block_options'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Block Display Options'),
      '#default_value' => variable_get('shoutcast_block_options', array('details_link',
            'currentlisteners', 'songtitle'
          )),
      '#options' => array(
          'details_link' => t('Show \'Details...\' link under block. Don\'t forget to set access permissions.'),
          'currentlisteners' => t('Current listeners'),
          'peaklisteners' => t('Peak listeners'),
          'maxlisteners' => t('Max listeners allowed'),
          'reportedlisteners' => t('Reported listeners'),
          'averagetime' => t('Average length of time people listen'),
          'servergenre' => t('Server genre'),
          'serverurl' => t('Server URL'),
          'servertitle' => t('Server Title'),
          'songtitle' => t('Display current song title'),
          //'songurl' => t('Song URL'), // object
          'irc' => t('IRC'),
          //'icq' => t('ICQ'), // object
          //'aim' => t('AIM'), // object
          'webhits' => t('Web hits'),
          'streamhits' => t('Stream hits'),
          'streamstatus' => t('Display server status'),
          'bitrate' => t('Stream bitrate'),
          'content' => t('Content type'),
          'version' => t('Server version'),
          //'webdata' => t('Web data'), // object
          'songhistory' => t('Song history'),
          'listeners' => t('Listeners'),
      )
  );
  return system_settings_form($form);
}

/**
 * Generate the menu items for shoutcast
 *
 * @return array   Menu items array
 */
function shoutcast_menu() {
  $items = array();

  $items['admin/settings/shoutcast'] = array(
      'title' => 'SHOUTcast stats',
      'description' => 'Get stats from SHOUTcast server as a block',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('shoutcast_admin'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
  );

  // this is added for this current tutorial.
  $items['shoutcast'] = array(
      'title' => 'SHOUTcast stats',
      'page callback' => 'shoutcast_all',
      'access arguments' => array('access shoutcast content'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Generate HTML for the shoutcast block
 *
 * @param  string  $op     Current operation from the URL
 * @param  int     $delta  Offset for this block
 * @return string  $block  Block content, an HTML table
 *
 * @todo Provide a song history block
 * @todo Review block fields, we don't really need to display all of these. Simplify.
 */
function shoutcast_block($op = 'list', $delta = 0) {
  // listing of blocks, such as on the admin/block page
  if ($op == 'list') {
    $block[0]['info'] = t('SHOUTcast stats');
    return $block;

  } elseif ($op == 'view') {
    // get SHOUTcast XML data, either from the server or cache
    $xml = shoutcast_get_xml();
    $options = variable_get('shoutcast_block_options', array('details_link',
          'currentlisteners', 'songtitle'
      ));

    // build the block's table
    $header = array('Statistic', 'Value');
    $rows = array();
    if ((string) $options['currentlisteners'] == 'currentlisteners') {
      $rows[] = array(
        array('data' => 'Current Listeners'),
        array('data' => $xml->CURRENTLISTENERS)
      );
    }
    if ((string) $options['peaklisteners'] == 'peaklisteners') {
      $rows[] = array(
        array('data' => 'Most Listeners'),
        array('data' => $xml->PEAKLISTENERS)
      );
    }
    if ((string) $options['maxlisteners'] == 'maxlisteners') {
      $rows[] = array(
        array('data' => 'Listener Limit'),
        array('data' => $xml->MAXLISTENERS)
      );
    }
    if ((string) $options['reportedlisteners'] == 'reportedlisteners') {
      $rows[] = array(
        array('data' => 'Reported Listeners'),
        array('data' => $xml->REPORTEDLISTENERS)
      );
    }
    if ((string) $options['averagetime'] == 'averagetime') {
      $avg = floor($xml->AVERAGETIME / 60);
      $rows[] = array(
        array('data' => 'Average Listen Time'),
        array('data' => $avg . ' minutes')
      );
    }
    if ((string) $options['servergenre'] == 'servergenre') {
      $rows[] = array(
        array('data' => 'Server Genre'),
        array('data' => $xml->SERVERGENRE)
      );
    }
    if ((string) $options['serverurl'] == 'serverurl') {
      $rows[] = array(
        array('data' => 'Server URL'),
        array('data' => '<a href="' . $xml->SERVERURL . '">' . $xml->SERVERURL . '</a>')
      );
    }
    if ((string) $options['servertitle'] == 'servertitle') {
      $rows[] = array(
        array('data' => 'Server Title'),
        array('data' => $xml->SERVERTITLE)
      );
    }
    if ((string) $options['songtitle'] == 'songtitle') {
      $rows[] = array(
        array('data' => 'Current Song'),
        array('data' => $xml->SONGTITLE)
      );
    }
    if ((string) $options['irc'] == 'irc') {
      $rows[] = array(
        array('data' => 'IRC'),
        array('data' => $xml->IRC)
      );
    }
    if ((string) $options['webhits'] == 'webhits') {
      $rows[] = array(
        array('data' => 'Web Hits'),
        array('data' => $xml->WEBHITS)
      );
    }
    if ((string) $options['streamhits'] == 'streamhits') {
      $rows[] = array(
        array('data' => 'Stream Hits'),
        array('data' => $xml->STREAMHITS)
      );
    }
    if ((string) $options['streamstatus'] == 'streamstatus') {
      ($xml->STREAMSTATUS == '1') ? $sc_srv_status = 'Up' : $sc_srv_status = 'Down';
      $rows[] = array(
        array('data' => 'Stream Status'),
        array('data' => $sc_srv_status)
      );
    }
    if ((string) $options['bitrate'] == 'bitrate') {
      $rows[] = array(
        array('data' => 'Stream Bitrate'),
        array('data' => $xml->BITRATE . ' kbps')
      );
    }
    if ((string) $options['content'] == 'content') {
      $rows[] = array(
        array('data' => 'Content Type'),
        array('data' => $xml->CONTENT)
      );
    }
    if ((string) $options['version'] == 'version') {
      $rows[] = array(
        array('data' => 'Version'),
        array('data' => $xml->VERSION)
      );
    }
    $attributes = array('id' => 'shoutcast-block-table');
    $block_content = theme('table', $header, $rows, $attributes);

    // when using checkboxes we have to cast the variable as a string
    if ((string) $options['details_link'] == 'details_link') {
      $block_content .= '<a href="' . url('shoutcast') . '">Details...</a>';
    }

    // set up the block
    $block['subject'] = variable_get('shoutcast_block_subject', 'SHOUTcast stats');
    $block['content'] = $block_content;

    return $block;
  }
}

/**
 * Generate HTML for the SHOUTcast page
 *
 * @return string  $page   Page content, an HTML table
 *
 * @todo Apply t() to all strings throughout the module
 */
function shoutcast_all() {
  $page = '';

  // get SHOUTcast XML data, either from the server or cache
  $xml = shoutcast_get_xml();
  $options = variable_get('shoutcast_page_fields', array('listener', 'server',
      'stream', 'songhistory', 'listener_detail'
      ));

  // throw an error is server doesn't respond
  if ($xml->RESPONSECODE != 200) {
    shoutcast_error($xml->RESPONSECODE);
  }

  // listener summary table
  if ((string) $options['listener'] == 'listener') {
    $head_listener = array('Current Listeners', 'Peak Listeners', 'Listener Limit', 'Reported Listeners', 'Avg Listen Time');
    $row_listener[] = array(
      array('data' => $xml->CURRENTLISTENERS),
      array('data' => $xml->PEAKLISTENERS),
      array('data' => $xml->MAXLISTENERS),
      array('data' => $xml->REPORTEDLISTENERS),
      array('data' => floor($xml->AVERAGETIME / 60) . ' min.'),
    );
    $attr_listener = array('id' => 'shoutcast-listener-table');
    $capt_listener = 'Listener Summary';
    $page .= theme('table', $head_listener, $row_listener, $attr_listener, $capt_listener);
  }

  // server summary table (not showing song title, it shows in song history)
  if ((string) $options['server'] == 'server') {
    $head_server = array('Genre', 'URL', 'Title', 'IRC', 'Web Hits');
    $row_server[] = array(
      array('data' => $xml->SERVERGENRE),
      array('data' => '<a href="' . $xml->SERVERURL . '">' . $xml->SERVERURL . '</a>'),
      array('data' => $xml->SERVERTITLE),
      array('data' => $xml->IRC),
      array('data' => $xml->WEBHITS),
    );
    $attr_server = array('id' => 'shoutcast-server-table');
    $capt_server = 'Server Summary';
    $page .= theme('table', $head_server, $row_server, $attr_server, $capt_server);
  }

  // stream summary table
  if ((string) $options['stream'] == 'stream') {
    $head_stream = array('Hits', 'Status', 'Rate', 'Type', 'Version');
    $row_stream[] = array(
      array('data' => $xml->STREAMHITS),
      array('data' => ($xml->STREAMSTATUS == '1') ? $sc_srv_status = 'Up' : $sc_srv_status = 'Down'),
      array('data' => $xml->BITRATE . ' kbps'),
      array('data' => $xml->CONTENT),
      array('data' => $xml->VERSION),
    );
    $attr_stream = array('id' => 'shoutcast-stream-table');
    $capt_stream = 'Stream Summary';
    $page .= theme('table', $head_stream, $row_stream, $attr_stream, $capt_stream);
  }

  // song history table
  if ((string) $options['songhistory'] == 'songhistory') {
    $page .= shoutcast_songhistory_table($xml->SONGHISTORY);
  }

  // listener detail table
  // @todo Lookup listener locations http://drupal.org/project/ip2cc
  if ((string) $options['listener_detail'] == 'listener_detail') {
    $rows_listeners = array();
    $head_listeners = array('UID', 'Host/IP', 'Agent', 'Underruns', 'Time Connected', 'Pointer');
    foreach ($xml->LISTENERS->LISTENER as $listener) {
      $rows_listeners[] = array(
        array('data' => $listener->UID),
        array('data' => $listener->HOSTNAME),
        array('data' => $listener->USERAGENT),
        array('data' => $listener->UNDERRUNS),
        array('data' => floor($listener->CONNECTTIME / 60) . ' min.'),
        array('data' => $listener->POINTER),
      );
    }
    $attrib_listeners = array('id' => 'shoutcast-listener-detail-table');
    $capt_listeners = 'Current Listeners';
    $page .= theme('table', $head_listeners, $rows_listeners, $attrib_listeners, $capt_listeners);
  }

  return $page;
}

/**
 * Get SHOUTcast server details from its XML stats page
 *
 * @return object  $xml      An XML object containing all stats
 *
 * @todo Fix caching and test to ensure that it's working.
 */
function shoutcast_get_xml() {
  // if the cache has expired or it doesn't exist, get stats from the server
  if ($xml_cache->expire < time() || !$xml_cache = cache_get('shoutcast')) {
    error_reporting(E_ALL ^ E_NOTICE);
    $host = variable_get('shoutcast_ip', '127.0.0.1');
    $port = variable_get('shoutcast_port', '8000');
    $password = variable_get('shoutcast_pw', 'password');
    $username = 'admin';
    $useragent = 'Mozilla/5.001 (Drupal SHOUTcast stats module)';
    $headers = array('User-Agent' => $useragent, 'Authorization' => 'Basic ' . base64_encode($username . ':' . $password));
    $response = drupal_http_request("http://$host:$port/admin.cgi?mode=viewxml", $headers, 'GET');
    $xml = simplexml_load_string($response->data);

    // append the request response code to the object
    $xml->RESPONSECODE = $response->code;

    // get the caching interval (in minutes) from the module's settings
    $interval = variable_get('shoutcast_cachetime', 1);

    // update the cache
    cache_set('shoutcast', $xml_data, 'cache', time() + ($interval * 60));

  } else {
    // get cached data
    $xml = simplexml_load_string($xml_cache->data);
  }

  return $xml;
}

/**
 * Associate an HTTP error message with its code for display
 *
 * @param  int    $code  HTTP server response code
 * @return void          Call drupal_set_message
 */
function shoutcast_error($code) {
  // SHOUTcast server response codes (HTTP), 200 OK
  switch ((int) $code) {
    case 203:
      $msg = 'Partial Information';
      break;
    case 204:
      $msg = 'No Response';
      break;
    case 401:
      $msg = 'Unauthorized';
      break;
    case 403:
      $msg = 'Forbidden';
      break;
    case 404:
      $msg = 'Not found';
      break;
    case 500:
      $msg = 'Internal Error';
      break;
    case 503:
      $msg = 'Gateway timout';
      break;
    default:
      $msg = 'Unknown error';
      break;
  }
  $message  = t('The SHOUTcast module has not been configured properly or the server is not responding.');
  $message .= t(" ($code: $msg)");
  drupal_set_message($message, 'error', true);
}

/**
 * Simple format of song history array as HTML
 *
 * @param  array   $history  Song list array, indexed by played date (unix timestamp)
 * @return string  $table     Song history in HTML format, each in a paragraph
 */
function shoutcast_songhistory_table($history) {
  $rows_history = array();
  $head_history = array('Played', 'Track Info');
  $timezone = variable_get('date_default_timezone',
          isset($_SESSION['timezone']) ? $_SESSION['timezone'] : 0);
  foreach ($history->SONG as $k => $track) {
    $rows_history[] = array(
      array('data' => format_date($track->PLAYEDAT, 'medium', '', $timezone)),
      array('data' => $track->TITLE),
    );
  }
  $attrib_history = array('id' => 'shoutcast-songhistory-table');
  $capt_history = 'Song History';
  $table = theme('table', $head_history, $rows_history, $attrib_history, $capt_history);

  return $table;
}
